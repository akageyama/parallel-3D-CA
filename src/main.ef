program main
  use automaton_m
  use constants_m
  use mpi
  use mpiut_m
!$use omp_lib
  use parallel_m
  use vis_m
  implicit none

  type(automaton_t) :: automaton
  type(vis_t) :: vis

  integer(DI) :: loop
  integer(DI) <const> :: LOOP_MAX = 10000_DI
  integer <const> :: W = MPI_COMM_WORLD

  call mpiut__init
  call mpiut__barrier( W )

  call parallel.initialize( W )
  call automaton.initialize
  call automaton.diagnosis
  call vis.initialize( automaton )
  call mpiut__barrier( W )

  call vis.visualize( automaton )

  do loop = 1, LOOP_MAX
    call automaton.update
    call automaton.diagnosis
    call vis.visualize( automaton )
    call mpiut__barrier( W )
  end do

  call vis__finalize
  call mpiut__finalize
  
end program main
