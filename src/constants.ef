module constants_m
  use iso_fortran_env
  implicit none
  private
  public :: SI, DI, SR, DR, PI, TWOPI
  public :: NPROC_X, NXPP, NXPP1, NX_GLOBAL
  public :: NPROC_Y, NYPP, NYPP1, NY_GLOBAL
  public :: NPROC_Z, NZPP, NZPP1, NZ_GLOBAL

  !!>

    The grid overlap on the boarders between neighbor ranks.

       left rank: ... NXPP NXPP1
                        |   |
         my rank:       0   1   2   3  . . .  NXPP-1 NXPP  NXPP1
                                                       |    |
      right rank:                                      0    1  ...


    The grid position integer is numbered globally,


    global grid num  1   2   3 ...   ... NXPP+1 NXPP+2 ...
                     |<---------- rank 0 -------->|
    local grid num   0   1   2 ...  NXPP-1 NXPP NXPP1 
                                             0    1    2    3 ... 
                                             |<---------- rank 1 -
                                
    The above figure indicates that 
      global_grid_number - 2 = NXPP*rank_num

  !!<

  !<< Fortran constants >>!
  integer <const> :: SI = int32
  integer <const> :: DI = int64
  integer <const> :: SR = real32
  integer <const> :: DR = real64

  !<< Mathematical constants >>!
  real(DR) <const> :: PI = atan(1.0_DR)*4
  real(DR) <const> :: TWOPI = PI*2

  !<< MPI constants >>!
  integer <const> :: NPROC_X = 1
  integer <const> :: NPROC_Y = 1
  integer <const> :: NPROC_Z = 1

  !<< Simulation constants >>!
  integer <const> :: NXPP = 50
  integer <const> :: NYPP = 50
  integer <const> :: NZPP = 50

  integer <const> :: NXPP1 = NXPP + 1
  integer <const> :: NYPP1 = NYPP + 1
  integer <const> :: NZPP1 = NZPP + 1

  integer <const> :: NX_GLOBAL = NPROC_X * NXPP + 2
  integer <const> :: NY_GLOBAL = NPROC_Y * NYPP + 2
  integer <const> :: NZ_GLOBAL = NPROC_Z * NZPP + 2

end module constants_m
